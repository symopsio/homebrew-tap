version: 2.1

executors:
  ubuntu:
    docker:
      - image: cimg/python:3.8.11
  macos:
    macos:
      xcode: "14.2.0"
    environment:
      LANG: "en_US.UTF-8"
      HOMEBREW_NO_AUTO_UPDATE: "1"
      HOMEBREW_NO_INSTALL_CLEANUP: "1"

orbs:
  macos: circleci/macos@2.4.0

commands:
  test_pip_install_macos:
    steps:
      - run:
          name: Install Python 3.9
          description: |
            Install Python 3.9, which was what was available in  the previous version of the CircleCI macOS executor
            we were using before migrating from Intel to Apple Silicon resources. It can be used by calling
            `python3.9` directly; `python3` will continue to point to the system Python.
          command: |
            brew install python@3.9
      - run:
          name: Test symflow pip install
          command: |
            python3 -m pip install sym-flow-cli
            pyenv rehash
            symflow version
      - run:
          name: Test sym pip install
          command: |
            echo '=== Setting up Cython bug workaround: https://github.com/yaml/pyyaml/issues/601#issuecomment-1660180265'
            echo 'cython < 3.0' > constraints.txt
            
            PIP_CONSTRAINT=constraints.txt python3.9 -m pip install sym-cli

            pyenv rehash
            sym version
  test_pip_install_ubuntu:
    steps:
      - run:
          name: Test symflow pip install
          command: |
            pip install sym-flow-cli
            symflow version
      - run:
          name: Test sym pip install
          command: |
            pip install sym-cli
            sym version
  test_pipx_install_macos:
    steps:
      - run:
            name: Install Python 3.9
            description: |
              Install Python 3.9, which was what was available in  the previous version of the CircleCI macOS executor
              we were using before migrating from Intel to Apple Silicon resources. It can be used by calling
              `python3.9` directly; `python3` will continue to point to the system Python.
            command: |
              brew install python@3.9
      - run:
          name: Test symflow pipx install
          command: |
            echo "=== Installing pipx with pip"
            # Note: this is the only difference between macOS and ubuntu, in the macOS image
            # for some reason we need to call pip as a python3 module specifically. However,
            # this causes the ubuntu version to fail. This is why they're separate.
            python3 -m pip install pipx
            pyenv rehash
            pipx ensurepath

            echo "=== Sourcing ~/.bash_profile to apply PATH changes in this session"
            source ~/.bash_profile

            echo "=== Installing symflow with pipx"
            pipx install sym-flow-cli

            symflow version
      - run:
          name: Test sym pipx install
          command: |
            echo '=== Setting up Cython bug workaround: https://github.com/yaml/pyyaml/issues/601#issuecomment-1660180265'
            echo 'cython < 3.0' > constraints.txt

            echo "=== Installing pipx with pip"
            python3.9 -m pip install pipx
            pyenv rehash
            pipx ensurepath

            echo "=== Sourcing ~/.bash_profile to apply PATH changes in this session"
            source ~/.bash_profile

            echo "=== Installing symflow with pipx"
            PIP_CONSTRAINT=constraints.txt pipx install --python python3.9 sym-cli
            sym version
  test_pipx_install_ubuntu:
    steps:
      - run:
          name: Test symflow pipx install
          command: |
            echo "Installing pipx with pip"
            pip install pipx
            pipx ensurepath

            echo "Installing symflow with pipx"
            pipx install sym-flow-cli
            symflow version
      - run:
          name: Test sym pip install
          command: |
            echo "Installing pipx with pip"
            pip install pipx
            pipx ensurepath

            echo "Installing sym with pipx"
            pipx install sym-cli
            sym version
  test_macos_package_install_x86_64:
    steps:
      - run:
          name: Test symflow (x86_64) macOS package install
          command: |
            curl -LO https://github.com/symopsio/sym-flow-cli-releases/releases/latest/download/sym-flow-cli-darwin-x86_64.pkg
            sudo installer -pkg sym-flow-cli-darwin-x86_64.pkg -target /
            symflow version
      - run:
          name: Test sym macOS package install
          command: |
            curl -LO https://github.com/symopsio/sym-cli-releases/releases/latest/download/sym-cli-darwin-x64.pkg
            sudo installer -pkg sym-cli-darwin-x64.pkg -target /
            sym version
  test_macos_package_install_aarch64:
    steps:
      - run:
          name: Test symflow (aarch64) macOS package install
          command: |
            curl -LO https://github.com/symopsio/sym-flow-cli-releases/releases/latest/download/sym-flow-cli-darwin-aarch64.pkg
            sudo installer -pkg sym-flow-cli-darwin-aarch64.pkg -target /
            symflow version
  test_dpkg_install:
    steps:
      - run:
          name: Test symflow dpkg install
          command: |
            curl -LO https://github.com/symopsio/sym-flow-cli-releases/releases/latest/download/sym-flow-cli-linux-x64.deb
            sudo dpkg -i sym-flow-cli-linux-x64.deb
            symflow version
      - run:
          name: Test sym dpkg install
          command: |
            curl -LO https://github.com/symopsio/sym-cli-releases/releases/latest/download/sym-cli-linux-x64.deb
            sudo dpkg -i sym-cli-linux-x64.deb
            sym version
  test_brew_install:
    steps:
      - run:
          name: Test symflow brew Formula
          command: |
            brew install --formula ~/project/Formula/symflow.rb
            symflow version
      - run:
          name: Test sym brew Formula
          command: |
            brew install --formula ~/project/Formula/sym.rb
            sym version

jobs:
  test_brew_install:
    resource_class: macos.m1.medium.gen1
    executor:
      name: macos
    steps:
      - checkout:
          path: ~/project
      - test_brew_install
  test_pip_install_macos:
    resource_class: macos.m1.medium.gen1
    executor:
      name: macos
    steps:
      - checkout:
          path: ~/project
      - test_pip_install_macos
  test_pip_install_ubuntu:
    executor:
      name: ubuntu
    steps:
      - checkout:
          path: ~/project
      - test_pip_install_ubuntu
  test_pipx_install_ubuntu:
    executor:
      name: ubuntu
    steps:
      - checkout:
          path: ~/project
      - test_pipx_install_ubuntu
  test_pipx_install_macos:
    resource_class: macos.m1.medium.gen1
    executor:
      name: macos
    steps:
      - checkout:
          path: ~/project
      - test_pipx_install_macos
  test_macos_package_install_x86_64:
    resource_class: macos.m1.medium.gen1
    executor:
      name: macos
    steps:
      - checkout:
          path: ~/project
      - macos/install-rosetta
      - test_macos_package_install_x86_64
  test_macos_package_install_aarch64:
    resource_class: macos.m1.medium.gen1
    executor:
      name: macos
    steps:
      - checkout:
          path: ~/project
      - test_macos_package_install_aarch64
  test_dpkg_install:
    executor:
      name: ubuntu
    steps:
      - checkout:
          path: ~/project
      - test_dpkg_install

workflows:
  test:
    jobs:
      - test_pip_install_macos
      - test_pip_install_ubuntu
      - test_brew_install
      - test_macos_package_install_x86_64
      - test_macos_package_install_aarch64
      - test_dpkg_install
      - test_pipx_install_ubuntu
      - test_pipx_install_macos
